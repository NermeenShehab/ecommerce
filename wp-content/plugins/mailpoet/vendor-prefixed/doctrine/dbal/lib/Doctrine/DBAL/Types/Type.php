<?php
 namespace MailPoetVendor\Doctrine\DBAL\Types; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\DBAL\Exception; use MailPoetVendor\Doctrine\DBAL\ParameterType; use MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform; use MailPoetVendor\Doctrine\Deprecations\Deprecation; use function array_map; use function get_class; use function str_replace; use function strrpos; use function substr; abstract class Type { public const BIGINT = \MailPoetVendor\Doctrine\DBAL\Types\Types::BIGINT; public const BINARY = \MailPoetVendor\Doctrine\DBAL\Types\Types::BINARY; public const BLOB = \MailPoetVendor\Doctrine\DBAL\Types\Types::BLOB; public const BOOLEAN = \MailPoetVendor\Doctrine\DBAL\Types\Types::BOOLEAN; public const DATE = \MailPoetVendor\Doctrine\DBAL\Types\Types::DATE_MUTABLE; public const DATE_IMMUTABLE = \MailPoetVendor\Doctrine\DBAL\Types\Types::DATE_IMMUTABLE; public const DATEINTERVAL = \MailPoetVendor\Doctrine\DBAL\Types\Types::DATEINTERVAL; public const DATETIME = \MailPoetVendor\Doctrine\DBAL\Types\Types::DATETIME_MUTABLE; public const DATETIME_IMMUTABLE = \MailPoetVendor\Doctrine\DBAL\Types\Types::DATETIME_IMMUTABLE; public const DATETIMETZ = \MailPoetVendor\Doctrine\DBAL\Types\Types::DATETIMETZ_MUTABLE; public const DATETIMETZ_IMMUTABLE = \MailPoetVendor\Doctrine\DBAL\Types\Types::DATETIMETZ_IMMUTABLE; public const DECIMAL = \MailPoetVendor\Doctrine\DBAL\Types\Types::DECIMAL; public const FLOAT = \MailPoetVendor\Doctrine\DBAL\Types\Types::FLOAT; public const GUID = \MailPoetVendor\Doctrine\DBAL\Types\Types::GUID; public const INTEGER = \MailPoetVendor\Doctrine\DBAL\Types\Types::INTEGER; public const JSON = \MailPoetVendor\Doctrine\DBAL\Types\Types::JSON; public const JSON_ARRAY = \MailPoetVendor\Doctrine\DBAL\Types\Types::JSON_ARRAY; public const OBJECT = \MailPoetVendor\Doctrine\DBAL\Types\Types::OBJECT; public const SIMPLE_ARRAY = \MailPoetVendor\Doctrine\DBAL\Types\Types::SIMPLE_ARRAY; public const SMALLINT = \MailPoetVendor\Doctrine\DBAL\Types\Types::SMALLINT; public const STRING = \MailPoetVendor\Doctrine\DBAL\Types\Types::STRING; public const TARRAY = \MailPoetVendor\Doctrine\DBAL\Types\Types::ARRAY; public const TEXT = \MailPoetVendor\Doctrine\DBAL\Types\Types::TEXT; public const TIME = \MailPoetVendor\Doctrine\DBAL\Types\Types::TIME_MUTABLE; public const TIME_IMMUTABLE = \MailPoetVendor\Doctrine\DBAL\Types\Types::TIME_IMMUTABLE; private const BUILTIN_TYPES_MAP = [\MailPoetVendor\Doctrine\DBAL\Types\Types::ARRAY => \MailPoetVendor\Doctrine\DBAL\Types\ArrayType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::ASCII_STRING => \MailPoetVendor\Doctrine\DBAL\Types\AsciiStringType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::BIGINT => \MailPoetVendor\Doctrine\DBAL\Types\BigIntType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::BINARY => \MailPoetVendor\Doctrine\DBAL\Types\BinaryType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::BLOB => \MailPoetVendor\Doctrine\DBAL\Types\BlobType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::BOOLEAN => \MailPoetVendor\Doctrine\DBAL\Types\BooleanType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::DATE_MUTABLE => \MailPoetVendor\Doctrine\DBAL\Types\DateType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::DATE_IMMUTABLE => \MailPoetVendor\Doctrine\DBAL\Types\DateImmutableType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::DATEINTERVAL => \MailPoetVendor\Doctrine\DBAL\Types\DateIntervalType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::DATETIME_MUTABLE => \MailPoetVendor\Doctrine\DBAL\Types\DateTimeType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::DATETIME_IMMUTABLE => \MailPoetVendor\Doctrine\DBAL\Types\DateTimeImmutableType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::DATETIMETZ_MUTABLE => \MailPoetVendor\Doctrine\DBAL\Types\DateTimeTzType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::DATETIMETZ_IMMUTABLE => \MailPoetVendor\Doctrine\DBAL\Types\DateTimeTzImmutableType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::DECIMAL => \MailPoetVendor\Doctrine\DBAL\Types\DecimalType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::FLOAT => \MailPoetVendor\Doctrine\DBAL\Types\FloatType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::GUID => \MailPoetVendor\Doctrine\DBAL\Types\GuidType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::INTEGER => \MailPoetVendor\Doctrine\DBAL\Types\IntegerType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::JSON => \MailPoetVendor\Doctrine\DBAL\Types\JsonType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::JSON_ARRAY => \MailPoetVendor\Doctrine\DBAL\Types\JsonArrayType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::OBJECT => \MailPoetVendor\Doctrine\DBAL\Types\ObjectType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::SIMPLE_ARRAY => \MailPoetVendor\Doctrine\DBAL\Types\SimpleArrayType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::SMALLINT => \MailPoetVendor\Doctrine\DBAL\Types\SmallIntType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::STRING => \MailPoetVendor\Doctrine\DBAL\Types\StringType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::TEXT => \MailPoetVendor\Doctrine\DBAL\Types\TextType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::TIME_MUTABLE => \MailPoetVendor\Doctrine\DBAL\Types\TimeType::class, \MailPoetVendor\Doctrine\DBAL\Types\Types::TIME_IMMUTABLE => \MailPoetVendor\Doctrine\DBAL\Types\TimeImmutableType::class]; private static $typeRegistry; public final function __construct() { } public function convertToDatabaseValue($value, \MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { return $value; } public function convertToPHPValue($value, \MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { return $value; } public function getDefaultLength(\MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { \MailPoetVendor\Doctrine\Deprecations\Deprecation::trigger('doctrine/dbal', 'https://github.com/doctrine/dbal/pull/3255', 'Type::getDefaultLength() is deprecated, use AbstractPlatform directly.'); return null; } public abstract function getSQLDeclaration(array $column, \MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform); public abstract function getName(); public static final function getTypeRegistry() : \MailPoetVendor\Doctrine\DBAL\Types\TypeRegistry { if (self::$typeRegistry === null) { self::$typeRegistry = self::createTypeRegistry(); } return self::$typeRegistry; } private static function createTypeRegistry() : \MailPoetVendor\Doctrine\DBAL\Types\TypeRegistry { $instances = []; foreach (self::BUILTIN_TYPES_MAP as $name => $class) { $instances[$name] = new $class(); } return new \MailPoetVendor\Doctrine\DBAL\Types\TypeRegistry($instances); } public static function getType($name) { return self::getTypeRegistry()->get($name); } public static function addType($name, $className) { self::getTypeRegistry()->register($name, new $className()); } public static function hasType($name) { return self::getTypeRegistry()->has($name); } public static function overrideType($name, $className) { self::getTypeRegistry()->override($name, new $className()); } public function getBindingType() { return \MailPoetVendor\Doctrine\DBAL\ParameterType::STRING; } public static function getTypesMap() { return \array_map(static function (\MailPoetVendor\Doctrine\DBAL\Types\Type $type) : string { return \get_class($type); }, self::getTypeRegistry()->getMap()); } public function __toString() { \MailPoetVendor\Doctrine\Deprecations\Deprecation::trigger('doctrine/dbal', 'https://github.com/doctrine/dbal/pull/3258', 'Type::__toString() is deprecated, use Type::getName() or get_class($type) instead.'); $type = static::class; $position = \strrpos($type, '\\'); if ($position !== \false) { $type = \substr($type, $position); } return \str_replace('Type', '', $type); } public function canRequireSQLConversion() { return \false; } public function convertToDatabaseValueSQL($sqlExpr, \MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { return $sqlExpr; } public function convertToPHPValueSQL($sqlExpr, $platform) { return $sqlExpr; } public function getMappedDatabaseTypes(\MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { return []; } public function requiresSQLCommentHint(\MailPoetVendor\Doctrine\DBAL\Platforms\AbstractPlatform $platform) { return \false; } } 